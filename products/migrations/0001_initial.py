# Generated by Django 5.2.3 on 2025-06-29 13:53

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import taggit.managers
import utils.custom_fields.slug_field
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('slug', utils.custom_fields.slug_field.AutoSlugField(db_index=False, editable=False, max_length=255, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('cached_tags', models.TextField(blank=True, editable=False, help_text='Cached tags as plain text for FTS', null=True)),
                ('sv', django.contrib.postgres.search.SearchVectorField(editable=False, help_text='Search vector field for full-text search', null=True)),
                ('is_published', models.BooleanField(default=False, verbose_name='Is Published')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('tags', taggit.managers.TaggableManager(help_text='Tags for the product', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at', 'id'],
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['sv'], name='product_sv_idx'), models.Index(condition=models.Q(('is_published', True)), fields=['is_published'], name='published_products_idx'), models.Index(condition=models.Q(('is_deleted', False)), fields=['is_deleted'], name='deleted_products_idx'), models.Index(fields=['slug'], name='product_slug_btree_idx'), models.Index(fields=['title'], name='product_title_idx')],
                'unique_together': {('title', 'slug')},
            },
        ),
    ]
